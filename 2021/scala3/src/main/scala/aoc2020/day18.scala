package aoc2020

object day18 {

  // ----------------------------------------
  // Day 18
  // Grammar:
  //     eval: term ( '+' term )
  //     '+' : '+' term | '*' term
  //     term: ( digit )
  //
  // ----------------------------------------
  // FIXME: Doesn't work :/
  class Eval1(expression: String) {
      var regex = """(\d+)|(\+)|(\*)""".r
      var tokens1 = regex.findAllIn(expression).toList
      var tokens = tokens1.map(_.head)

      var i = 0
      def next(): Char =
        val ret = tokens(i)
        i += 1
        ret
      def consume(token: Char): Char = if i < tokens.length && tokens(i)  == token then next() else '\u0000'
      def term(): Long =
        val t = next()
        if t == '(' then
          val ret = eval()
          consume(')')
          return ret
        else t.asDigit


      def eval(): Long =
        var t = term()
        var cnt = true
        while cnt do
          if consume('+') != '\u0000' then t += term()
          else if consume('*') != '\u0000' then t *= term()
          else cnt = false
        t
  }

  def evaluate1(expr: String): Long = {
    val queeue = expr.filter(_ != ' ').iterator
    def rec(): Long =
      var result = 0L
      var op: Option[Char] = None
      while queeue.hasNext do
        val c = queeue.next
        if c == ')' then return result
        else if c == '+' || c == '*' then op = Some(c)

        else
          val snd = if c == '(' then rec() else c.toString.toLong
          result = op match {
            case Some('+') => result + snd
            case Some('*') => result * snd
            case _ => result * 10 + snd
          }
          op = None
      result
    rec()
  }

  import scala.collection.{mutable=>mu}
  def evaluate2(expr: String): Long = {
    val queeue = expr.filter(_ != ' ').iterator
    def rec(): Long =
      var result = 0L
      var ops = mu.Stack[Char]()
      var operands = mu.Stack[Long]()
      def eval(): Long =
        while ops.nonEmpty do
          ops.pop match {
            case '*' => operands.push(operands.pop * operands.pop)
            case '+' => operands.push(operands.pop + operands.pop)
          }
        operands.pop

      while queeue.hasNext do
        val c = queeue.next
        if c == ')' then return eval()
        else if c == '+' then ops.push(c)
        else if c == '*' then
          while ops.nonEmpty && ops.top == '+' do
            operands.push(operands.pop() + operands.pop())
            ops.pop()
          ops.push(c)
        else if c == '(' then
          operands.push(rec())
        else operands.push(c.asDigit)
      end while

      eval()

    rec()
  }

  def evaluate1Stack(expr: String): Long = {
    val queeue = expr.filter(_ != ' ').iterator
    var result = 0L
    var op: Option[Char] = None
    val stack = scala.collection.mutable.Stack.empty[(Long, Option[Char])]
    while queeue.hasNext do
      val c = queeue.next
      if c == '+' || c == '*' then op = Some(c)
      else if c == '(' then
            stack.push((result, op))
            result = 0
            op = None
      else
        val (snd,op1) = if c == ')' then stack.pop else (c.toString.toLong, op)
        result = op1 match {
          case Some('+') => result + snd
          case Some('*') => result * snd
          case _ =>
            if c == ')' then result else result * 10  + snd
        }
        op = None

    result
  }

  def part1(input: String): Unit =
    println(day18Data.input.split("\n").foldLeft(0L)((acc, line) => acc + evaluate1Stack(line)))

  def part2(input: String): Unit =
    println(day18Data.input.split("\n").foldLeft(0L)((acc, line) => acc + evaluate2(line)))

  def main(args: Array[String]): Unit = {
    part1("(8 * (6 * 8 + 3) * 9 * 9 * 8) * 2")
  }

}

object day18Data {
  val sample =
    """
      |2 * 3 + (4 * 5)
      |5 + (8 * 3 + 9 + 3 * 4 * 3)
      |5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
      |((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
      |""".stripMargin
  val input =
  """
      |(8 * (6 * 8 + 3) * 9 * 9 * 8) * 2
      |4 + (9 * (8 + 9 + 7 + 5 + 2) * (4 + 3 + 2 + 9 + 5 * 7)) * 2
      |(7 * 8 + 6 * 3) * 3 * 2 * ((5 + 7 * 8 * 8) * (9 + 6 * 9 * 7 + 6 * 7) + 8 + (7 + 2 + 3 + 7 * 5 * 5) * (5 + 8) + 5) * 6
      |4 * 9 * (6 + 7 + 6 + 5 + 7 + (4 * 6 + 5)) + 9 + (4 * 2 * 6) + 2
      |5 * ((3 * 2 + 2 * 7) + 9 * 6) + (6 * (5 * 4 + 4 * 2 * 3 + 9) + 8 * (4 * 4) * 7 * 2) + (9 * 7 + 5 * 4)
      |4 + (8 + 9 * 5) + 5 + 9 + 6 + 2
      |(4 + 4 * 2 + 2 + 3) + (9 * 7 * 9) + 2 * 9 + 9 * 5
      |6 + (9 + 4) + 4 + 6 * 7 * 5
      |4 * (8 * (4 + 4 + 8 * 7 * 6 + 8) * 8 * 9 + 7 * 7) * 8 + 2 * 9 + (5 * 7 + 3 + (8 * 8 * 3 + 3 + 4) * (8 * 5 + 4))
      |(7 + 4 + 6) * 6 * 3 * 6 * 8 + 4
      |3 + (7 * (4 * 3 + 7 * 8 + 3 + 3) * 8) + (7 + 9 + 4 + 3 + (4 * 7) * 5) + (3 + 8) + 2 + 3
      |4 + (9 + (8 * 3 * 8 * 6 * 4 * 9) + (5 * 4 + 5 + 8 + 5) + (7 * 8 + 3 * 4 + 8)) * 9 + 7 * 9
      |7 + (2 + 8 + (7 * 6 * 8 + 6) * 8) * 9 + (5 * (9 * 6))
      |(9 * (6 + 2 * 3 * 9 + 7 + 5) * 9 + (6 + 6 * 9 * 6)) * 6 + 8 * 8 + 2 * 4
      |(5 * (7 * 9 + 8 * 2 + 5 * 4) + (6 + 7 + 6 + 9) + (5 + 3 + 6 + 9 * 7) + 7 + (4 + 9 + 2 * 3 * 4 + 5)) * 2 * 8 * (2 * 9 * (8 * 5 + 3 * 8 + 5)) + (5 + 4 * 4 * 2) * 2
      |9 * (9 * 2 * 3)
      |(7 * 8 * (6 * 4) + 8) * 4 + (3 * (9 * 4 + 7 * 6 * 3 + 9)) + 2 + 5
      |(6 + (4 * 6 + 8 * 9)) * 6
      |9 + 5 * (9 + 6 + (9 + 7 * 8 + 2 * 9) * (4 + 6 * 5 * 8 * 2) + 2 * 8) * 8 * (9 + 5 * (4 * 9) * 3 + 3 + (4 * 2))
      |2 + (6 * 8 + 6) * 8 * (5 + 2)
      |6 + 8 + 8 + (9 * 8 + 2 * 4 + 4 + 2) * 2 * 3
      |((5 + 5) + 2 + (7 * 2)) + 8 * 5
      |((8 * 9 * 5 * 7 + 3) * 8 + 4 * 5) * 2 + 7 + 9 + (6 * 5 + 7 + 2 * 6 * (4 * 9 + 5 + 2)) + (7 + 2 * 4 + (9 * 3 + 6 + 6 * 7 + 6) + (9 * 6 * 2 + 3 + 5) * 4)
      |3 + (2 + 7 * (5 + 2 + 8 * 5) * 7 * 7 * 3) * 9 * 4 + 3 * 8
      |(6 * 3) * (2 + 4 * 5 + 5 * 3)
      |5 * (2 * 2 + 6 * 2 * 2) + 5 * 6 * 4 + (9 * 5 * (5 * 4))
      |3 + 6 * 2 * 6 + 8 * 9
      |5 + 4 * (2 + (7 + 2 * 8 + 5 + 9 * 7)) * 8 + (2 * (6 * 3 * 3) + (6 * 5) * 8 * 9)
      |7 + (2 + 9 * 2 + (2 + 4 + 8 * 4)) * 4 * 3 * (8 * 4 * (4 + 5 + 8) * 5 + 3)
      |8 + ((8 * 3) + 3 * 7 + 6 + 8) * 4 + 6 * 6
      |2 * (4 + 9 * 8 * 8 * 3 + 9) + 9 * (8 + 9 * (5 * 4 * 4 + 9) + (6 * 2 * 6 * 3 + 9 + 5) + 3 + 3)
      |((7 * 5 + 3) + 7 * 5) + 4 * 2 * 7 + 5 + 6
      |4 + 9 * (6 * 6 * 4) + (7 + 6) * (3 * 8 + 3 * 6)
      |(7 + 5 * 6 * 8 * (7 + 4 * 5)) + 9 * 6 + 2 + 7
      |4 * 3 * 4 * (2 + 6 + 6 + 2 + 6) + 8 * (6 + 6 * 3 * 2 * 6)
      |4 * 6 * 2 * (9 + 4)
      |4 * 3 * 6 + 9 + (3 + 5 * 9 * 3 + 3) * (8 * 3 * 7)
      |((6 * 7 * 9) + 2 * 5 * 4 * 8) * ((3 + 4 + 6) * 3 * 3) * 8 + ((3 * 8 + 9 * 5 + 6 + 8) * 2)
      |4 * 6 + 3 * 6 + 6 * (4 + 7 + (8 + 4 * 5 + 4) * 6)
      |2 + (6 + (5 + 8 + 4 * 5 * 6 + 6) + 4 + 2 * 2 * 8) * 9 * (6 * 6 + 9 + 7 * 8)
      |3 * 6
      |(9 + 8 * 9) * 4 * (3 + 5 * 3 + 5) * (6 * 3 + 6 + 9) * (6 * 9 * 3 * 3 * 4 + 9) * (6 + 9 + 2 + 8)
      |4 * (8 + 9 * 6) * 7 * 3 * (9 + 6 * 2)
      |(7 + 3) * (3 + 8 + 3 * 8 + (4 * 9 * 9 + 5)) + 4 * ((2 + 2 * 2 + 7 + 4 + 9) + 5 * (2 * 6 + 8 + 2) + 4 * (7 + 7 + 7 * 8 * 8 + 3) + 7) + 2
      |(7 + 4 + 5 * (3 + 5 * 2 + 3)) * 3 * (7 * 3 + 9 * (3 * 2 + 4 * 7 + 3 + 2) + 4) + (5 + 3 + (9 * 5 + 6 + 5 + 4 * 8) * 4 + 4)
      |4 * 6 + 7 + (3 * (4 + 2 + 4)) * 4 + (7 + (6 + 7) * 3 + 2 + 6)
      |6 + 3 * 5 * 2 * (4 * 9 + 6 + 5 * 8)
      |(6 * (3 + 2)) + (8 + (3 * 8 + 7 * 7) * 5) * (3 * (6 + 3 * 5 * 2 * 7 + 4) + 5 + 5 * (5 + 6 + 5 * 3 * 2 + 6)) + 6
      |(4 * 2 * 4 + 7 + 2) * 7 * (6 + 7 + (5 * 5 + 3) * (5 * 2)) + 5 + 2
      |9 * ((5 + 3) * 5 + 6 * 5)
      |((7 + 9 * 9 + 8 * 8) * 4 + 6 * 5 * 6 + 9) + (9 + 5 * 3 + 5 * 8 * 2) + 8 + 2
      |(7 * 4 * 6 + 5 + (9 + 5 * 5 + 5) + 3) + 5 * (3 * 4 * 6 * 5)
      |2 + (8 + 9 * (8 + 3)) * 2
      |(9 + 9 * 5 + 5) * 2 * 6 * (5 + (9 * 4 + 7 + 6 * 2) + 3 + 3) + (7 + 4 + 3 * 4 + (4 + 8 + 5 * 2))
      |(4 + (7 + 3) + (4 + 5 + 7 * 9 * 8) + 5) + (6 + 5) * (2 * 2 * 9) * 7 * 9 + 4
      |5 + 9 + (2 * (6 + 9 + 9 + 2 * 3 * 3) * 8 + 8 + 4) * (9 + 9 * 4 + 3 * 9 * (5 + 9 + 7 + 4 + 7))
      |2 + 4 + 2 * (5 + 9) + (3 + 2 * 8 * (9 * 5 * 3 * 6 + 6 + 5) + 7 + 9) + 5
      |6 + ((2 + 2 * 3 * 9) * (4 + 6)) + 2 + 3 + 2
      |2 + (2 + 5) * (3 * 8 * 5 + 6 + 7) * 6
      |2 + 2 + (7 * (4 + 4 * 7 + 3) + 2) * ((2 * 8 * 5 + 2 * 4 * 5) * 2 * 9 + (8 + 5 * 4)) + 9
      |9 * 9 + 7 + (9 + 3 * (9 + 2 + 4) + 3 * 4 + 9)
      |5 + (7 + 8 * (7 + 2 * 5 * 7)) * 8 + 6
      |(2 * (2 + 5) * 2 + 2 + 8 * (4 + 3 * 8 + 8 + 2 * 9)) * 9 + 9 * 7 * 2 * 9
      |4 * (7 * (8 + 6 * 2 * 6 + 2 + 7) * (5 * 7 + 5 * 2) + 5 + 5 + (3 + 8 + 2 + 5 * 8)) + 7
      |5 + ((4 + 5 * 6 * 5) * (6 * 2 + 2) * 8) * (9 + 9 + 9 * 3 * 4 + 2) * 3 + 2 * 4
      |7 + 7 + 3 + 9 + ((6 + 5) * 8 * 2) * 6
      |5 * 7 * 5 + (5 + (8 * 6) + (5 * 2) * 6)
      |(9 * 5 + 7 * 5 * 3 + 2) * 5
      |(5 * 2 * 2 * (4 * 8 * 6 + 7 + 3) * 7) * 8 * 3
      |(5 + 4 + 9 + (4 * 7 + 5 + 8) + 9) * 7 * (8 * 7 + 6 + 4 * 2) * 8
      |3 * 9 * 7 + 7
      |2 + 5 + 3 * (6 * 8 + 3 + 5 + (9 + 8 * 7))
      |2 * 3 + 5 * 3 * (9 + 2 * 9 * 9 * 9 + 2) * 9
      |8 * ((9 + 7) + 9 + 6 * 7 * (7 * 9 * 6 + 6 + 4)) + 3
      |4 + 5 * 7 + (8 + (7 * 6 + 5 + 5) + 7) + 2 * 5
      |2 + ((3 + 7) * 4 + (9 * 7 + 5) + 4) * 2
      |5 + 2 + 4
      |3 + ((5 + 9 + 8) * (5 * 2 * 9 * 6) + 6) + 9 * 2
      |4 * (3 * 3 + 2 * 2) * (5 * 8 + 6 * 2 * 5 + 4)
      |5 + 8 * 2 + (8 + 3 + 4 * 2 + 2 + 5) + (4 + 8) * ((7 + 8 * 3 * 9 + 5 * 5) + 7 + 7)
      |5 + ((9 * 8 + 2 * 8 + 3 + 4) + 6 * 5) + 4 * 8
      |2 + (8 + 4 + 6 + 2 + 6) * 5 * (5 + 7 * 7 * 6 * 5 + 4) + 9 * 8
      |3 * (9 * 9 * 4) + 3
      |4 * 9 * ((7 * 9 + 2 * 2 * 6 * 7) * 6 * 6 + 4) * 5 + 6 + 8
      |2 + 6 + 7 + 5 + (4 + 2 + 2 + (9 * 2 + 8 * 7) + 9) + 9
      |3 * (3 * 5 + 2 * (5 * 9 * 8)) * 8
      |((3 + 7 + 7 * 5) * 3) * 8 + 6 + 5 + 2 * 9
      |4 * 4 + (7 + (4 * 3 + 2 * 5 + 3) * 7 + 6 * (8 + 2 * 5 + 4 * 7)) + 4 * 7 * 8
      |7 * (2 + (4 + 6 * 4 * 8 * 7 * 6) + 5 + 8) * 5 + 2 + ((6 * 5 + 8 * 7 * 9 + 2) + 8 * 7 + 2 + 4) * (3 + 5 + (5 + 4) + 3 * 7 + 7)
      |9 + ((4 * 2 + 7 + 8) + 7) + 9
      |(6 * 7 * (5 + 9 * 9 + 9) + (5 * 9 * 8 + 5 + 2 * 2) * 5) * 2 * (6 * (7 * 3 + 5 * 7 * 9) * 2 * 5) + 5 * 2 + 8
      |7 * ((4 + 8) + 7) + 5 + 6
      |(8 * 4 + (5 + 4 + 7 + 3 * 4 + 5) * 9 + 9) * 2 * (3 * 3 + 5 + 4 * (5 * 5 * 5 * 9)) * 7
      |9 * 8 + 8 + (4 * 5 + 3) * 8
      |3 + 9 + (5 + 7 + 7) * 2 + 6
      |4 + 8 + (9 * 2) * ((5 * 5) + 5 + 8 * (6 * 3))
      |3 * 7 * 5 + 4 + (8 * 7)
      |(3 + 5) * 9 * 6 * (9 * 4 * 8) * 5
      |(9 + 8) * 3 * 9 + 3
      |9 + 6 + 9
      |(7 + 6 * (8 + 5 + 2) * 6 + 7 + 7) * 4 * (3 * 5) * 5 * 7 * 4
      |(9 + 3 * (4 * 2 * 3 * 9 * 7)) + 7 + ((9 * 8 * 4 + 2 + 4 * 7) * 7) + 2
      |2 + (6 + 9 * 3 + 6 + 5 + 4) + 8
      |4 * 7 + 5 + (7 + 8 * 7 * 4 * 7 + (6 + 9 + 3 * 6 * 9 * 8))
      |9 + 9 * 4 + 3 * 5
      |4 + (3 * 7 + 4 + (7 + 6 * 4 * 8 + 9 + 7) * 9 * 9)
      |(8 * (2 * 6) + 9 + 7 + 3) * 9 + 8 * (5 * 5 + 5) * (6 + 7 + 6)
      |(2 * 3 * (6 + 3) * 5 * 6) + 7 + 8
      |9 + 2 + 5 + (3 * (9 + 3 + 2 + 7 * 6) + (6 * 6 * 2 * 3 * 2 * 2) + 3 * 9 + 2) + (3 + 4 + 3 * 8 * 7) * 5
      |4 * 7 + 4 + 5 * (9 + 7 + 7 * (6 * 8) * 7)
      |(4 + 9 + (2 + 8 * 2 + 4) + 4) * 2 * 4 + 8
      |(7 * 8 * 7 + 7 + 5 + (6 + 7)) * 8 + 8 * 6
      |5 + 6 * 3 + 6 * (5 * 8 + 2 * 4 + 5) * 9
      |5 + (5 * 8 + 7 * 7 * (7 * 4 * 9 + 4 + 8 * 5)) * 9 + 8 + 5
      |5 * 6 + (2 + (3 + 3 * 6 * 4 + 5 * 2) * 7 * 7) + 8
      |8 + 6 * (6 * (9 * 5 + 9 * 9) + 6 + (4 * 2) + 6 + 9) + 9
      |8 + (3 + (6 * 2)) + 8
      |6 * (5 * 2 * 8 * 5)
      |4 * 2 * 7 + 7 + (3 + 2 + (4 * 6) + 5) * (2 * 6 + 5 + 7 * 2)
      |9 * 7 + 4 * 3
      |9 + (9 + (3 + 2) * (4 + 6 + 2 + 9 + 2) * 4 * 9 * 7) * 8
      |7 * 5 + (4 * 4) + 8
      |2 * 9 * 7 + (4 + 5 * 3 + 9 * 9 + 6)
      |8 * 4 + 7 * (5 + 3 + 3 + (2 * 5 * 2 + 6) + 7 + 3) * (5 * 9 + 2 + 5) * 3
      |((7 * 8 * 6 * 3 * 9 * 5) + (6 + 5 * 7 + 8) * 5 * 7 * 9 * 2) + 8 * ((2 + 6 * 9 + 8 * 8 + 3) + 8 + 5 * 4 + 8) + 7 * 8
      |6 + 3 * 2
      |(8 + (8 * 4 + 3 * 2 + 3)) + 2 * 4 * 3 + 3
      |(4 + 4) * (2 + 8 * 3 + (8 + 5 * 6 + 3) + 8 * 5)
      |8 + ((4 * 5 + 7) + 9 * 2 * 2 + (2 * 7 + 3 * 6)) + 4 + 2 * 4
      |6 * 8 + 9 + (3 + 2 + 4 + (2 * 2 + 7 * 5) + 3) * 3
      |7 * ((3 * 6 * 3) * (3 + 4 * 5 * 4 + 8) + 5 + (7 + 3 * 2 * 9) + 7 * 4)
      |6 * ((6 + 5 * 7 + 6 * 8) * 5 * 3) + 5 * 8 + 6
      |(4 * 7) + (2 + 8) + ((3 + 4 + 4 * 8 * 3) * 2 * 2 + 7) + 5
      |((2 * 5 * 9) + 8 + 4 * 7) * 3 + 8 * (6 * 4 * 3 * 2)
      |((2 * 4 + 2) * 2 * 4) * 9 + 5 * 6
      |3 * (8 * 3 + (6 + 3 + 4 + 6 * 6) * 7 + 8) * (7 * 2 + (9 + 4 + 3 * 7) + 3 * 7 + (4 * 5 + 3)) + (8 + 3 * 4 * 5 + (7 + 7 + 7) + 3) * 9 + 9
      |(8 + 9 + 5 + 3 + 3) + 6 + 6 + 9
      |7 + (6 * 2 * 3) + 8 * 8
      |2 * 7 + 4
      |(3 * (6 + 4) + (5 + 6 * 5 + 4) * 8 * 9 * 6) * 6
      |2 * (7 + 4) * (6 + (3 * 2 + 9 + 2 + 2 + 7) + 4)
      |5 * 8 * 4 + 5 + (6 * 7 + 3 * 2) + 2
      |(9 + 8 + 5) * 2 + 2 + 6
      |3 * 9 * (2 + 4 * 4 + 3 + 2 * 3)
      |6 + ((9 * 6 * 3 + 8) * 4 * 8 + 7) * 3 + 2 + 8
      |7 * 8 + (3 + 6 + 3) + 7
      |7 * (8 + 2 * 5 + 3 * 5 * 3)
      |2 + 2 + (3 + (7 * 7) + (7 + 3 + 4 + 3 + 3 * 5) * 4 * 7) + 5
      |(3 * 8 + 4) + 4 * (5 + 5 * 2) * 4 * 2
      |6 + 9 + (6 + 5) + 6 * (6 + 4 * 3 + 7 * 3 + 6)
      |2 + ((6 + 6 * 2) * 5 * 2 * (4 * 7 + 3 * 9 * 4)) + (3 * (2 * 8 + 6 * 4 + 9 + 2) * 2)
      |4 * ((5 * 9 * 2 + 3 + 3) * (5 * 8 + 9 + 8 * 5 + 7)) * (6 * 6 * 2 * 9 + 6 + 4) + 9
      |(4 * 9) + (2 + 8 + 7 * 6) + 7 + 7 * 7 + 8
      |8 + (9 + 5 + (5 * 2 * 6 * 2) * 4 * 9 + 7) + 8 * 3 + 4 * (5 + 4 * (2 + 2 + 6 * 8 + 9 * 7) + 2 + 3)
      |(3 * 6) * 2 + 3 + 3 * 3 + ((2 + 5 + 2 + 4 * 4) + 7 * 9 * 2 + 7 * 4)
      |(8 * 9 + 6) + 3 * 2 + (5 * 5 * (2 * 4 * 8 * 3) * (2 * 5))
      |9 * (6 * 6) * 2
      |8 + 6 * 4 * (9 * (8 + 7 * 6 + 8 + 5 + 8)) + 9
      |8 + 8 * 7 + (8 * 7) + 8
      |7 * ((6 * 5 * 5 + 9 * 6) * 4 + 3)
      |6 + 3 + 8 * 9 * 4 * (8 + 7 * 4 * 6 * 2 + 5)
      |(2 + 2 * 3 * 4 * (9 + 8 * 4) * 7) + 3
      |3 * ((5 * 6 * 9 * 2 * 6 + 4) + 3 * 2 + 7 + 5) + 5 * 2
      |9 * (4 + 8) + (6 * 5) * 4 * ((7 + 2 + 5 + 7) + 2 * 5 * 4) * (9 + 3 * (6 * 7 * 5 * 4 + 6) + (5 * 8 * 3 * 4 * 6) * 5 + (2 * 2 + 7 + 3))
      |4 + ((8 * 3) * 4 * 7 + 2 + 8) + (4 + 8 + 6 + 2) * 5 * 2
      |4 * (2 * 5 * 8 * 2 + 7 * (9 * 7 * 6 + 3 * 2 + 9))
      |3 + ((4 * 6 + 3 + 6 * 5 + 3) * 3) + 2 + 7 * (3 + 2) + 7
      |(9 + (4 + 8 * 4 + 6 * 4) + 4 * 9) + (4 * 6) * 6 + 3
      |(4 + 5) * 8 * 2 + 3 + 5
      |3 + (6 + (6 + 7) * 8 + (4 * 8 * 6 + 4) * (6 + 2 * 7))
      |8 + 8 * (9 + 8 + (4 * 6 * 6 + 2 * 3 * 4) + (8 + 2 + 3 * 7 + 4) * 9) * (2 + 9) * (9 * 7 * (6 + 4 + 5 + 3 + 8 * 5) * 9 * 7)
      |7 * 6 * (8 * 2 + 8 * 8 * (9 * 5) * 5) * 3 + 6
      |5 * (2 * (5 + 6 + 3) * (9 * 6 + 6 * 2 * 7) + 6) * 5 * 4 + 2 + (6 * (3 + 9 * 8))
      |(3 + 6 * 8 * 9) + 8 + 3 * 2 + 2 + 2
      |4 * 7 * (3 * 5 * 5 + 8 + 5)
      |(5 + 2) * 6 + ((9 + 3 * 7 * 5) * 6) + 8 * 9
      |7 + 5 + 8 + 8 * (9 + 4 * 5 + 4 * 4 * 9)
      |5 + 7 * 2 + 8 + 2
      |9 + ((2 + 9 * 6) * 8 * 9 + 2 + 2) + (6 * (7 + 3) + 3 + 3 * 7) * 3 * 3 + 9
      |8 * (5 + 8 + 2 * 4 * 2) + ((2 + 4 * 7) * 8 * (4 * 8 + 2 + 2 * 6 + 8) + 2) + ((8 + 3 * 6 + 9) + (5 * 3) * 8 * 7 * 8)
      |9 + 4 + (4 + 9 + 7 * 6) + 3 * 6 + 9
      |9 + (2 * 5 + 7 + 5 * (6 * 2 + 5 + 2 + 3 * 5) + 3) + 2 * (3 + 9 * 4 * 8) + 3 + ((9 + 3 + 7 * 2 + 7 * 5) + 7 * 5)
      |7 * 4 * 6 * ((9 + 9 * 2 * 4 + 2 * 2) * 7 + 9) * 8
      |6 * 5 + 4 * ((4 * 9 * 7) * 8 + 6 + 7) * 7 + 3
      |9 + 9 * 9 * 4
      |8 * 6 + 7 * ((9 * 4 * 2 + 9) + (6 * 9 * 2 + 2 + 5) + 8 * 6 * 6)
      |3 * (6 + 9 * (9 * 3)) + ((5 * 6 + 7 * 5 + 4 * 3) + 5 * 6 * 9) * 5 * ((8 * 2 * 6 * 5) + 5 * 8 + 5 + 9)
      |4 * (6 + 6 * 7 * 5 + 8) * 6 + 2
      |((9 * 8 * 3 * 6 + 2) * 4 + 7 * (5 * 8 * 2 + 4 + 9)) * 2 + ((7 + 3 * 3) * (7 + 3) * 3) + 7
      |8 * 4 * 9 + 8 * (8 + (6 + 6 * 2 + 4 * 4) * 3) + 8
      |(9 + (8 * 8 + 9 * 6) * 7) + 7 * 9 + 6 * 4
      |3 * 7 + (6 * (5 * 5 + 2 * 8 + 7 * 2) + (2 + 2 + 5 + 4 + 9) + (4 + 5 * 3 + 8 * 7) + 9 + 9) + 2 * 4
      |9 + (3 + 9 * (9 + 9 * 4) + 5) * 8 * ((6 * 8 * 4 * 9 + 9) * 5 + 2 * 9)
      |7 + ((5 + 6 + 5) * 8) * 5 + 9 + 5
      |2 + 2 + 9 + ((2 * 8 + 3) + 9 + 7) + ((6 + 3 + 2 + 8) + (4 * 7 * 6 + 2))
      |3 * 6 + ((6 * 6 + 7) + (2 + 3 * 7 + 4) + 4 * 2) * 2
      |9 * 3 + (9 * (6 * 5 + 6 * 2 + 7) + (5 * 7) + 3) * 6 * 9 + 3
      |5 + 9 + (9 * (4 + 5)) + (9 * 2 * (3 + 7 + 2 + 6 + 8) + 6 + 2) * 7
      |4 * 3 + ((7 * 4) * 3 * 4 + 7 + 9 + 7)
      |2 * ((3 * 6 + 3 + 3 + 9 + 2) * 4 + (5 * 8 + 4 + 6 + 5 + 8) * 5) + 9 * 5
      |4 + 9 * 3 * ((2 + 2 + 5 + 2 * 3 * 4) * 6 * 8 * (5 + 3 + 7 * 9 + 4) * (2 * 4) + (4 * 2 * 2))
      |5 + 7 + ((4 + 5 + 5 + 6) * 5 + 9 + 6) * 9 * 7
      |((6 * 8 + 5) + 8 + 3 + (4 * 5 * 9 * 2 * 9 + 6) + 7) * 9 + (6 * (8 + 6 + 4) * (6 * 9) + (9 * 2 + 8 * 4 * 8 + 5) * 9 * 5) + (5 * (7 + 5 + 3) * 5)
      |((4 * 6 + 4 * 2 * 4) * 9 + 5 * 9 + 5 * 9) + (3 * 7 * 9) * 7
      |2 * 2
      |(3 + (5 + 6) + 3 * 4 * 5 + 3) * 7
      |5 + 7 + 2 + 3
      |(8 * 7 + 9 * 9 + (3 + 9 * 7 * 7 * 9) * 6) * 4
      |8 * (9 + (3 + 4 + 7 * 5 * 9) + (8 * 4) * 4 * 7) * (8 + 3 + 5 * 9 + 8) + 2
      |9 + 2 + (3 + 3 + 8) * 2 * 3 + (3 * 9 * 5)
      |4 * 9 + 5 + (8 * 8 * 4) * 8 + 3
      |6 * 5 * ((9 + 9 * 9) * (3 * 5) * 3 + 6 + 8) * 2
      |4 * ((2 + 2 * 8 * 6 + 5 + 7) + 6 * 8 * 7 * 6)
      |(9 + 3 * (4 + 5 * 8) * 5 + 9) + (9 * 4) * (3 * 3) * 8
      |(2 * 3 * (6 * 5 + 8)) + 7 + ((5 * 7 * 5 + 9) + 9 * 3 + 2 * 2) + (3 * 5 * 8) * 2 * 4
      |3 * (8 + (6 * 3 + 9 * 7 + 2 * 5) * 2) * 3
      |7 * (3 + (8 * 9 + 9 * 6 * 4) * 8 + 4 + 6 + 7) + 7 + (9 + 5)
      |8 + 4 + 7
      |((2 * 8 * 5 + 3 + 9) * (9 + 6 * 8 * 3 * 5) * 2 + 7 + (2 + 2 * 4 + 5) + 9) + 8 * 7 * 6 * (4 * 8 * 3 + 7 * 7 * 9) + 4
      |(2 + 3) + 8
      |5 * 7 * ((6 + 6 + 8 * 2 + 4 * 5) + (6 + 9 + 8 + 8 * 6)) * 8 + 3 + 2
      |(3 + 9 + 7 + 5) + 6 + 3
      |7 + ((2 * 5 + 8 + 7 * 3 * 2) * 9 + 5) + 9
      |4 + 2 * 4 * (5 + 8 * 8 * 5 + 6)
      |5 * 9 * (6 * 3 * 7 * 7 + 9 + 6) * 7 * (6 + 2 + 7 + 9) + 5
      |4 + (5 * 2 + (5 + 4) * (2 * 3 + 4 * 5 + 4) * 3 * 2) * ((9 * 6 * 5 + 7 + 7) + 7)
      |(7 + (5 * 9 * 3 * 8) * 4 + 2 * 7 + 2) * 5
      |((4 * 8 + 9) + (3 * 7 * 7 * 7) * (9 * 3 * 2) * (8 + 4 * 6 * 9)) * 7 + 3 * 7 + 2
      |(8 * 3 + 8 + 2 * 3 + 3) + 2 * 3
      |5 * (5 * 8 + 3 * 4 * 3 + 6) + 7 + 7
      |5 * (7 + (4 * 9)) * 3 + 7
      |8 * 9 + (9 + (2 * 2 * 8 + 6)) * 6
      |4 + ((9 * 6 * 7 * 6 + 8) * 6 * 2 + (9 + 7 + 2 * 7 + 4) + 6) + 5 * 4 + 7
      |(5 + 3 * 9 + (4 + 7 + 5) * 2 * (8 * 4)) * 5 + 3 + 6
      |9 * 4
      |2 * (3 + (9 + 6 * 4 + 7 * 5 + 4) + 7) * 6 * 4 + 8 + 7
      |(2 * 9 + 3 * 2 + 8) * 5 * 8 + (9 * 3 * 2 + (9 + 4 * 8) * 6) + 7 + (8 + 7 + 8 * 2 * 2)
      |(9 + 7 + 5 * (6 * 4 * 7 + 9 * 9 + 2) * 2) + 7 * (6 * (2 + 7 * 3 * 8 * 3 + 3) * 7 + (4 * 4 + 5 + 6 * 9))
      |(2 + (6 + 8) * 6 + 9 * 4 * 2) * 9 * 6 + 8
      |6 * (5 * 8 + 7) * (4 * 3 * 6 + 4 * 4 * 5) * 6 * (7 * 4 + 5)
      |2 + (8 * (7 * 7 * 2) * 2) + 3 + (4 + 5 * (8 * 4 + 2 * 3) + 7 + 8) * 4
      |3 + ((7 + 5 + 3) * 7)
      |(5 + 6 + 7) * 3 + ((9 + 2) + 8 + (9 + 5 + 8 + 4 + 7 * 4) + 4)
      |((4 * 2 * 5 * 6 + 6) + 2 * 9 + 6 + 3) + 6 * (8 * 8 + 5 + (9 + 4 * 2 + 2 * 7 * 7) * 6) * 8
      |(5 * 9 * 8 * 7 * 5 + 4) + 6 * 4 * 5 * 9 + 5
      |5 * 5 + 5 + (9 * 3 + 3 + 7 * 4) + 6 + (7 + 2 + 5 * 6 * 4 + 4)
      |(5 * 2 * 7 + 9 + (6 * 9 + 2 * 3)) * 3 * 7 * 6 + 5 * 9
      |5 * (6 * 5 + 9 + 5) * 9 + (5 + 6 + (4 * 3 * 9 + 4 + 4 * 4) + 3)
      |((2 * 2) * 7 * 9 * 2 * 5) + 3 + (8 + 9) + 7
      |7 * (3 + (8 * 9 + 3 + 8 + 2) + 8 * 9 + 5 + 7)
      |8 * (4 + (6 * 3 + 6 * 5 * 6 + 5) * 9 * (4 + 3 + 5) + (7 + 4 * 6 * 3)) * 2 + 7 * 2
      |(8 + 9 * 7 * 8) + 7 * 3 * 9 * 3
      |7 + 6 * 4 * (9 * 8 + 6 + 7) * ((2 * 8) * 4 + (6 * 8) * (7 * 6 + 8 * 3) + 5 * 7) * 7
      |(4 + 9 + (3 + 2) + (5 + 3)) * 9 * 7 + 3 * 4 + 4
      |8 * (3 + (9 + 5 + 9 * 3) * 9 * 7 + 3 * 9) + 6 + 6
      |2 + 3 + (4 * 6) * (5 * 9 * (2 + 3 + 7 * 8 * 4) * 8 * 3)
      |3 + 8 * (2 * (7 + 8 + 6 + 7 + 7))
      |((8 + 7 * 7 + 6) + 5) + 3
      |7 * 3 + (2 * 5 * 9 + 8) + 8
      |2 * 5 * (7 + (6 + 9 * 5 * 2 * 6 * 6) * 8) + 6
      |((4 * 3 + 3 + 3 + 6 + 9) * (9 + 2) * (5 * 8 * 9 + 6 * 4) + (9 * 8)) + 6 + 8
      |((7 + 9 + 2 + 7 + 4) * 8 + (4 * 7 * 4) * 4) + (5 + 8 + 6) + 5 * 9
      |(8 * 6 * 7 * 7 + 7) + 2 + 5
      |2 + ((8 + 3 * 7 + 7 * 7) * 2 + 8 + (4 * 8 * 5 + 4))
      |9 + 2
      |4 * 7 * (3 * (9 + 8) * 8 + 2 * 8) * (8 + 2 + 6 + 3) * 8
      |6 + 3 * 7 * (2 + 5 + (3 + 8 + 9 * 2 * 3 * 4) + (7 * 9 + 6 + 4) * 2 * 6)
      |(5 * 2) + 3 + (4 * 8 * 9) * 7 * 7 + ((7 * 3) + 9)
      |8 * (3 * 4 * 5 + 8) * 7 + 3
      |5 + (6 + (7 * 8 + 2 * 4) + 2 + (4 + 2 + 9 * 7 + 4 + 6) + 5 + 5) + ((5 + 9 + 3) * 6 * (9 * 7 + 4 * 5 + 8) * 3 * 8) * 6
      |(9 + 6 * (7 * 4 + 3 + 7 + 9 + 5)) * 5 * ((7 + 7) * 4 * 7) + 6
      |5 + (9 + 3 * 6 + 2 * 9) + 5 * 3 * 5 + 6
      |9 * ((7 + 5 + 2) + (4 * 8 + 7 + 9 * 5) * (8 + 9) + 8) + 5
      |3 * (4 * 8) + 2 * 4 + (6 + (9 * 3 * 9) * (3 + 3 + 6 + 2 + 8)) * ((5 * 4 * 9 + 2 + 4) + 7 + 8 * 2)
      |(2 * 3) * 4 * (4 + 6 * 3)
      |5 + (4 * 4) + 2 * 8
      |(4 * 5 * 5 + (6 * 9 + 9 * 6) + 2 * 7) * (4 + (5 * 6 + 5 * 8))
      |5 + ((3 + 5) + 5) + 5 + 6 + 5
      |6 * (4 * 3 + 6 + 3 + 9 + 5) * (7 + 6) * 2 * 7
      |5 + 5 * 5 + 2 * (2 + (7 + 8 * 9 * 6 + 4) + 4 + 2)
      |9 + ((8 + 6 + 4 + 4) + 5 * (5 + 3 * 6 + 2 + 2 + 8) + (3 + 9 * 5) + 4) + 4
      |5 + 3 * 9 * (8 + 3 + 9 + 2) * 7
      |(5 * (3 + 5 * 2 * 3)) * 9 + 5 * 4
      |9 * 6 * 8 + (4 + (5 + 6 * 9 * 5 + 7) * 6) * 2 * 2
      |8 + 2 * 4 * (5 * 3 * 2 + (7 + 3)) * 9 + 3
      |2 + 3 * 9 * (4 * 4 + 3) + 2 + (7 * 2 + (2 + 6 + 8 * 7 + 6 * 2) + (4 + 3 + 3 + 3 * 5 * 5))
      |2 * 2 + (9 + 6) + 5 + 5 + 8
      |6 + 5 * (6 * 2 + (2 + 2) + 7)
      |5 + 7 + (7 * (3 + 7 + 7) * 9 * 2 + 8 + (6 + 7 * 8 * 3))
      |(6 * 5 + 7 + 5 + 7) * (4 + (5 + 6 + 4 * 7 + 4 + 4) + 6 * 9 * (5 * 7 + 9 * 5 * 6) + (2 + 8 * 4 * 6)) + (4 * 5 + 7 * 9 * 3) * 4 * ((2 + 8 + 9 + 2 * 8 + 3) * (4 + 3 + 2 + 7 + 7 * 6))
      |2 * 6 * 4 * ((5 + 9) * 5 * (6 * 7) * 4 * 8)
      |(7 + 4 + 8 + 2 + 5) * 2 + 3 * 6 + 7
      |6 + 3 * (6 * (2 * 4 + 7 + 3) * 6 * 9 + 4 * 3) + (5 * (4 + 9 * 5 * 5 * 2 + 2)) + 2
      |9 * 9 * 9 * 3 * ((9 * 9 + 6 * 2 + 6 * 5) + 7) * 6
      |(3 + 8 * 8 + 8 * 8) + (5 + 3 * 5 + 4 + 6) + 9
      |6 * 8 * 4 + (8 + 5 * 2 * 7)
      |4 * (2 + (8 + 3 * 9) * 3) + 2
      |(2 * 9) * 8 + 4 * (4 + (7 * 6 * 9) + 4 + (5 * 5 + 7 * 7 * 9) * 2) + 3 * 9
      |((4 + 7 * 3 + 4 * 2 + 3) + (9 * 3 * 9 + 6 * 8) + 9) * 3 * 5 + (5 + 4 * 5 * 6)
      |(8 * 2 * 9 * 6 * 3 * (5 + 6 * 2 + 9 * 4)) + 3
      |3 + 3 * 7 + 3 * 4 + 5
      |8 + (7 + 5) * 8 + 3 + ((8 * 7 + 8 + 6 + 6 * 3) + 7 + 2)
      |3 * 4 * (4 + 3 * 6)
      |3 + (8 * 4 + 8 + 9 + 6)
      |6 * 9 * 6 * 2 * (7 * 6 * 2 + 3 * (8 + 6)) + (5 + 7)
      |6 * 7 * 6 * 7 * 8
      |6 + 9 * (2 * (2 + 2 * 9 + 4) * 2 + 6 * (5 * 8 * 5 + 3 * 5)) + 4
      |8 * 3 * 3 * 3 * 8 + (3 + (3 * 8 + 7) + 5 + 2)
      |7 * 2 * ((8 * 7 + 3) + 3)
      |2 * 9 + (7 * 6) + (5 + 8) + 7 + 9
      |9 + 4 + (6 + (7 * 3 * 9 + 3 + 7) * 4 + (2 * 9 + 3 * 2 * 6) * 3 + 6) * 2 + (5 + (6 + 2 * 4 * 5 * 3 + 7) + 5 * 3 + 7 + 6) + 3
      |2 + 2 + 4 * 5 * 9 * 2
      |7 * 2 * 3 + 8 * 6 * 5
      |5 + 6
      |(3 + (6 + 7 * 2) + 8 * (2 + 4 + 4 + 5 + 6)) * 6
      |(4 * (2 + 3)) + (8 * 3) + (7 * 8 * 8 + 3 + 9 * 4)
      |8 + (8 * (2 * 5) * 8 * 7 * 2) + 7
      |6 * (6 * 8 + (9 * 5 + 2 + 9 + 3 * 6) * 8) + 7 + 6 * 6 + 2
      |2 * 7 * ((7 * 3) * 7 * 2)
      |2 * (9 + 8) * 3 + 8 + 7
      |(6 + (2 * 2 * 2) + 9 * 6) * 6 + 9 + (7 * 4 + 8)
      |4 * 7 + 7 * (3 + 2 * 4 * 8 + 6) + 9
      |8 + ((6 * 4 * 6 * 3 * 2) * (9 + 5 + 4 * 4 + 5 + 9) * 3 * 3 * (4 + 5 * 8 + 5 + 6) + (9 + 8 * 9 + 6 + 8 * 7)) * (9 * 9 * 2) * 5 * 3 + 2
      |5 + ((3 + 7 * 9 * 6 * 6) + 8 + 3 * 3 + 8 + 4) + (4 * 8 * (4 * 9 + 8))
      |((6 * 4 + 2 + 7 * 4) * 2) + (8 + 9) * (8 * (2 + 7 * 7 * 4 * 9 * 3) * 7 * 7 + 4) * 3 * 4 * 7
      |(8 + (9 * 6 + 5) + (4 + 5 * 4)) + 9 + (3 * 8) + 6
      |((3 + 7 + 9) + 3 + 3) * 4 + 2 + (6 * (8 + 4 + 3 + 4) + 3) * 7
      |((7 + 9) * 4 + (7 + 8 * 6 * 5 + 8) + 2) * ((3 + 4 + 7) + 2 * 3 * (5 * 6 + 6 * 4 * 4) * (5 + 2) + (3 * 4 * 4))
      |5 * (8 * 6 * 3 + (2 * 8)) + 2 + 5 * 2 + 6
      |4 * 5 + (8 * 4)
      |(4 * 5 + (8 + 7 + 5 * 8 * 5 * 8) + (2 + 7)) * 2 * ((8 * 3 + 5 + 9 + 3 + 5) + 3 + 5 + 8) * (3 + 8 * 6)
      |(7 * 6) * (2 + 8 + 6 + 3 * 5) * 2
      |3 * 7 + 5 * 2 * ((9 + 8 * 7 * 4 * 2) * 5 + 4 + 9 * 4 * 5)
      |9 + 7 * 3 * ((7 + 3 + 2) + 8 * 4 * 4 * (7 + 5 * 6)) + 4
      |((2 + 9) * 4 * 7) * (8 + 9 + 4 * 8 + 6 + 2) + (9 * 4 * 9 * 6 * 6 * (6 * 4 + 6 * 4 * 7 + 3)) * 6 * 3
      |(4 * 4) + 6 + 4 * 7 * (4 + 8 + 9 + 9 + 3) + 3
      |6 + 3 * (7 * 3) * 8 + 9
      |6 * 3 * 2 * 3 * 4
      |9 * (5 + 6 + (2 * 9 + 6 + 8 * 7) + (2 * 5 + 7) + (5 * 2 + 9 * 3 + 7 + 7)) * 6 * 5 * (9 + 6 * (5 + 2 * 8 * 9 * 5 * 9) * 3 + 6)
      |8 + 4 + 2 + (3 * 3 * 2 * (9 * 7 * 8 * 2)) + 4 + 7
      |(3 * 6 + 9 + 8 * (6 * 4)) * 7 * ((5 * 9 * 2 * 2) + 3 + 4 + 8 + 5) + 3 * 7
      |(2 * 4 + 4 + (8 * 2 + 8 + 6 + 2) + 4 + 9) + 9 * (2 * 6 * (4 * 3 + 7 + 6 * 4 * 7) + 3 * 2) + 3 + 8 * 7
      |7 + 7 + 8 + (9 * 7 * (6 * 8 * 2 + 7 * 4)) * 5 + 9
      |(9 + (8 + 8 * 7) + 2 * 3) + 3 + 5 * 2 * (5 + 4 + 2 + 6 * 8 + 5) + 8
      |4 * 4 * 4 * (2 + 6 * 7) * (5 + 4)
      |7 + 7 * 8 + 4 + (6 + 4 + 4 + 5)
      |((3 + 6) * 6 * 7 * (5 * 6 + 5)) + 2
      |((9 + 9 + 4) * 7) * 7 * 7 * 3 + 6 + 4
      |9 + 2 * 9 * 5 * 8
      |3 * (7 * 7)
      |6 * 2 + 3 + 2 * ((6 * 6) * 3)
      |2 + 6 * ((9 + 7 * 3) * 7 + 8 + (3 + 9) * 7) + 5 * 3
      |6 + 6 * (8 * 5) * (2 * 3 + 5 * 8 * 5 + 2)
      |(5 + 5 * 4) * 2 + 3 * ((4 * 6 + 2 + 9) * 9 + 7) + 8 * (7 * 8 * 5 * 7 + 4 * 9)
      |5 + 8 + (4 + (5 * 6 * 6 * 5 + 4)) * 4 + 2
      |6 + 2 + (4 * 7 * 7 * 2 * 8 + 8) + 7
      |8 + ((5 * 9) + (8 + 8 + 6 + 7 + 6 + 3) * 9) + 7 + 7
      |5 + 5 * 3 + 8
      |(6 + 4 + (8 * 2) * 5) * 3 * 6 * 8 + 3
      |(4 * 2) * 2 + 2 + 5 + (7 * (6 * 5 * 6 + 4) * 8 * (8 * 2) * (9 * 5 + 4 * 3 + 6 * 4) * 3)
      |8 * (3 + 7 * 5 * 4) + 4 + 4 + 6 * 8
      |(5 * 7) * 5 + 9 + (4 + 8 * 9 * 5)
      |3 * ((5 + 9) * 4 + 6 * 7) * 2 * 3 * 8
      |7 * (6 * 9 * (6 * 9 + 3 + 6 * 4) * 5) + ((8 + 5 + 2 + 4 + 8) + 4 + 9) + 8
      |7 + (3 * 5 * 7 + (4 + 9 + 3 + 6 + 7)) + (5 + 8 * (7 + 5 + 7)) + (7 * 4)
      |(4 + 7 + 2) * 2 + 9
      |6 * 4 + 9 + 6 * 6 + 7
      |6 * ((7 * 6) * 7 + 4 * 5 * 6 + 4) * (9 * (9 + 3) * 7)
      |(4 * 5 + 4 * 2 + 3 + 3) + 8 * 6 * ((3 * 4 + 5) + 2 + 3 * 8 + 6 + 9) * 8
      |((5 * 2 * 6 + 3) + (7 + 3 + 3) * (5 + 9)) * 7 * 6
      |5 + 6 * 4 + (7 + (3 + 3)) * (9 * 9 + (2 * 4 * 4 + 3) * 5 + 5 * 4) + 5
      |3 + 5 * (6 + 9 + (7 + 3 + 3 + 7) * 4 + 2 + 8)
      |5 * 5 + (5 * 6 * 5) * 5 * 2 + (3 * 5 + 9 + 6)
      |6 * (8 * 7 * 2 + 6) * 3
      |""".stripMargin.trim
}